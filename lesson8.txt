Не выполняя код, ответить, что выведет браузер и почему:

1.
if (!("a" in window)) {
    var a = 1;
}
alert(a);

Получим undefined. var объявляет переменную глобально или локально 
во всей функции, независимо от области блока. В if не заходим, присвоения
не происходит.
	
2.
var b = function a(x) {
    x && a(--x);
};
alert(a);

Получим ошибку, что а не определена. Это происходит, так как используется
функциональное выражение. Функциональные выражения попадают в работу только 
после начала работы с переменными. Функция создается при выполнении кода.

3. function a(x) {
    return x * 2;
}
var a;
alert(a);

Получим тело функции, так как у нас используется function declaration. Переменной а
присваивается функция. Далее в «var a» происходит инициализация переменной без
присваивания ей значения.

4.
function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

Объект arguments — это локальная переменная, доступная внутри любой (нестрелочной) функции. 
Объект arguments позволяет ссылаться на аргументы функции внутри неё. Он состоит из 
переданных в функцию аргументов, индексация начинается с 0. Таким образом перезаписываем 
значение третьей переменной и полчаем 10.

5.
function a() {
    alert(this);
}
a.call(null);

Получим [object Window]
Значение this, передаваемое в качестве контекста выполнения в метод call, при передаче null и 
undefined, заменяется на глобальный объект window.

